/*
 * This file is generated by jOOQ.
 */
package org.jooq.inova.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.inova.Inova;
import org.jooq.inova.Keys;
import org.jooq.inova.tables.records.CursosRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cursos extends TableImpl<CursosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>inova.cursos</code>
     */
    public static final Cursos CURSOS = new Cursos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CursosRecord> getRecordType() {
        return CursosRecord.class;
    }

    /**
     * The column <code>inova.cursos.idcursos</code>.
     */
    public final TableField<CursosRecord, Integer> IDCURSOS = createField(DSL.name("idcursos"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inova.cursos.nome</code>.
     */
    public final TableField<CursosRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>inova.cursos.ano</code>.
     */
    public final TableField<CursosRecord, Integer> ANO = createField(DSL.name("ano"), SQLDataType.INTEGER, this, "");

    private Cursos(Name alias, Table<CursosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cursos(Name alias, Table<CursosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>inova.cursos</code> table reference
     */
    public Cursos(String alias) {
        this(DSL.name(alias), CURSOS);
    }

    /**
     * Create an aliased <code>inova.cursos</code> table reference
     */
    public Cursos(Name alias) {
        this(alias, CURSOS);
    }

    /**
     * Create a <code>inova.cursos</code> table reference
     */
    public Cursos() {
        this(DSL.name("cursos"), null);
    }

    public <O extends Record> Cursos(Table<O> child, ForeignKey<O, CursosRecord> key) {
        super(child, key, CURSOS);
    }

    @Override
    public Schema getSchema() {
        return Inova.INOVA;
    }

    @Override
    public UniqueKey<CursosRecord> getPrimaryKey() {
        return Keys.KEY_CURSOS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CursosRecord>> getKeys() {
        return Arrays.<UniqueKey<CursosRecord>>asList(Keys.KEY_CURSOS_PRIMARY);
    }

    @Override
    public Cursos as(String alias) {
        return new Cursos(DSL.name(alias), this);
    }

    @Override
    public Cursos as(Name alias) {
        return new Cursos(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cursos rename(String name) {
        return new Cursos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cursos rename(Name name) {
        return new Cursos(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
