/*
 * This file is generated by jOOQ.
 */
package org.jooq.inova.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.inova.Indexes;
import org.jooq.inova.Inova;
import org.jooq.inova.Keys;
import org.jooq.inova.tables.records.FormandosRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Formandos extends TableImpl<FormandosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>inova.formandos</code>
     */
    public static final Formandos FORMANDOS = new Formandos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FormandosRecord> getRecordType() {
        return FormandosRecord.class;
    }

    /**
     * The column <code>inova.formandos.idformandos</code>.
     */
    public final TableField<FormandosRecord, Integer> IDFORMANDOS = createField(DSL.name("idformandos"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inova.formandos.nome</code>.
     */
    public final TableField<FormandosRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>inova.formandos.morada</code>.
     */
    public final TableField<FormandosRecord, String> MORADA = createField(DSL.name("morada"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>inova.formandos.codpostal</code>.
     */
    public final TableField<FormandosRecord, String> CODPOSTAL = createField(DSL.name("codpostal"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>inova.formandos.telefone</code>.
     */
    public final TableField<FormandosRecord, String> TELEFONE = createField(DSL.name("telefone"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>inova.formandos.idcursos</code>.
     */
    public final TableField<FormandosRecord, Integer> IDCURSOS = createField(DSL.name("idcursos"), SQLDataType.INTEGER.nullable(false), this, "");

    private Formandos(Name alias, Table<FormandosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Formandos(Name alias, Table<FormandosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>inova.formandos</code> table reference
     */
    public Formandos(String alias) {
        this(DSL.name(alias), FORMANDOS);
    }

    /**
     * Create an aliased <code>inova.formandos</code> table reference
     */
    public Formandos(Name alias) {
        this(alias, FORMANDOS);
    }

    /**
     * Create a <code>inova.formandos</code> table reference
     */
    public Formandos() {
        this(DSL.name("formandos"), null);
    }

    public <O extends Record> Formandos(Table<O> child, ForeignKey<O, FormandosRecord> key) {
        super(child, key, FORMANDOS);
    }

    @Override
    public Schema getSchema() {
        return Inova.INOVA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FORMANDOS_FK_FORMANDOS_CURSOS1_IDX);
    }

    @Override
    public UniqueKey<FormandosRecord> getPrimaryKey() {
        return Keys.KEY_FORMANDOS_PRIMARY;
    }

    @Override
    public List<UniqueKey<FormandosRecord>> getKeys() {
        return Arrays.<UniqueKey<FormandosRecord>>asList(Keys.KEY_FORMANDOS_PRIMARY);
    }

    @Override
    public List<ForeignKey<FormandosRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FormandosRecord, ?>>asList(Keys.FK_FORMANDOS_CURSOS1);
    }

    private transient Cursos _cursos;

    public Cursos cursos() {
        if (_cursos == null)
            _cursos = new Cursos(this, Keys.FK_FORMANDOS_CURSOS1);

        return _cursos;
    }

    @Override
    public Formandos as(String alias) {
        return new Formandos(DSL.name(alias), this);
    }

    @Override
    public Formandos as(Name alias) {
        return new Formandos(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Formandos rename(String name) {
        return new Formandos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Formandos rename(Name name) {
        return new Formandos(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
